{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade --force-reinstall  git+https://github.com/shelleyg-bit/colabcode.git"
      ],
      "metadata": {
        "id": "H0SU88XBPQcy",
        "outputId": "16c60f31-c9d8-45cd-8586-0682434bb483",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting git+https://github.com/shelleyg-bit/colabcode.git\n",
            "  Cloning https://github.com/shelleyg-bit/colabcode.git to /tmp/pip-req-build-rujt5hio\n",
            "  Running command git clone -q https://github.com/shelleyg-bit/colabcode.git /tmp/pip-req-build-rujt5hio\n",
            "Collecting pyngrok>=5.0.0\n",
            "  Using cached pyngrok-5.1.0-py3-none-any.whl\n",
            "Collecting nest_asyncio==1.4.3\n",
            "  Using cached nest_asyncio-1.4.3-py3-none-any.whl (5.3 kB)\n",
            "Collecting uvicorn==0.13.1\n",
            "  Using cached uvicorn-0.13.1-py3-none-any.whl (45 kB)\n",
            "Collecting jupyterlab==3.0.7\n",
            "  Using cached jupyterlab-3.0.7-py3-none-any.whl (8.3 MB)\n",
            "Collecting tornado>=6.1.0\n",
            "  Using cached tornado-6.1-cp37-cp37m-manylinux2010_x86_64.whl (428 kB)\n",
            "Collecting nbclassic~=0.2\n",
            "  Using cached nbclassic-0.3.7-py3-none-any.whl (13 kB)\n",
            "Collecting ipython\n",
            "  Using cached ipython-7.33.0-py3-none-any.whl (793 kB)\n",
            "Collecting packaging\n",
            "  Using cached packaging-21.3-py3-none-any.whl (40 kB)\n",
            "Collecting jinja2>=2.10\n",
            "  Using cached Jinja2-3.1.2-py3-none-any.whl (133 kB)\n",
            "Collecting jupyter-server~=1.2\n",
            "  Using cached jupyter_server-1.17.0-py3-none-any.whl (342 kB)\n",
            "Collecting jupyterlab-server~=2.0\n",
            "  Using cached jupyterlab_server-2.13.0-py3-none-any.whl (53 kB)\n",
            "Collecting jupyter-core\n",
            "  Using cached jupyter_core-4.10.0-py3-none-any.whl (87 kB)\n",
            "Collecting typing-extensions\n",
            "  Using cached typing_extensions-4.2.0-py3-none-any.whl (24 kB)\n",
            "Collecting h11>=0.8\n",
            "  Using cached h11-0.13.0-py3-none-any.whl (58 kB)\n",
            "Collecting click==7.*\n",
            "  Using cached click-7.1.2-py2.py3-none-any.whl (82 kB)\n",
            "Collecting MarkupSafe>=2.0\n",
            "  Using cached MarkupSafe-2.1.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n",
            "Collecting terminado>=0.8.3\n",
            "  Using cached terminado-0.13.3-py3-none-any.whl (14 kB)\n",
            "Collecting Send2Trash\n",
            "  Using cached Send2Trash-1.8.0-py3-none-any.whl (18 kB)\n",
            "Collecting nbconvert>=6.4.4\n",
            "  Using cached nbconvert-6.5.0-py3-none-any.whl (561 kB)\n",
            "Collecting traitlets>=5.1\n",
            "  Using cached traitlets-5.1.1-py3-none-any.whl (102 kB)\n",
            "Collecting prometheus-client\n",
            "  Using cached prometheus_client-0.14.1-py3-none-any.whl (59 kB)\n",
            "Collecting anyio<4,>=3.1.0\n",
            "  Using cached anyio-3.5.0-py3-none-any.whl (79 kB)\n",
            "Collecting argon2-cffi\n",
            "  Using cached argon2_cffi-21.3.0-py3-none-any.whl (14 kB)\n",
            "Collecting jupyter-client>=6.1.12\n",
            "  Using cached jupyter_client-7.3.0-py3-none-any.whl (130 kB)\n",
            "Collecting nbformat>=5.2.0\n",
            "  Using cached nbformat-5.3.0-py3-none-any.whl (73 kB)\n",
            "Collecting pyzmq>=17\n",
            "  Using cached pyzmq-22.3.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.1 MB)\n",
            "Collecting websocket-client\n",
            "  Using cached websocket_client-1.3.2-py3-none-any.whl (54 kB)\n",
            "Collecting sniffio>=1.1\n",
            "  Using cached sniffio-1.2.0-py3-none-any.whl (10 kB)\n",
            "Collecting idna>=2.8\n",
            "  Using cached idna-3.3-py3-none-any.whl (61 kB)\n",
            "Collecting entrypoints\n",
            "  Using cached entrypoints-0.4-py3-none-any.whl (5.3 kB)\n",
            "Collecting python-dateutil>=2.8.2\n",
            "  Using cached python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n",
            "Collecting jupyter-client>=6.1.12\n",
            "  Using cached jupyter_client-7.2.2-py3-none-any.whl (130 kB)\n",
            "  Using cached jupyter_client-7.2.1-py3-none-any.whl (130 kB)\n",
            "  Using cached jupyter_client-7.2.0-py3-none-any.whl (130 kB)\n",
            "  Using cached jupyter_client-7.1.2-py3-none-any.whl (130 kB)\n",
            "  Using cached jupyter_client-7.1.1-py3-none-any.whl (130 kB)\n",
            "  Using cached jupyter_client-7.1.0-py3-none-any.whl (129 kB)\n",
            "  Using cached jupyter_client-7.0.6-py3-none-any.whl (125 kB)\n",
            "  Using cached jupyter_client-7.0.5-py3-none-any.whl (124 kB)\n",
            "  Using cached jupyter_client-7.0.4-py3-none-any.whl (124 kB)\n",
            "  Using cached jupyter_client-7.0.3-py3-none-any.whl (122 kB)\n",
            "  Using cached jupyter_client-7.0.2-py3-none-any.whl (122 kB)\n",
            "  Using cached jupyter_client-7.0.1-py3-none-any.whl (122 kB)\n",
            "  Using cached jupyter_client-7.0.0-py3-none-any.whl (122 kB)\n",
            "  Using cached jupyter_client-6.1.12-py3-none-any.whl (112 kB)\n",
            "Collecting json5\n",
            "  Using cached json5-0.9.6-py2.py3-none-any.whl (18 kB)\n",
            "Collecting requests\n",
            "  Using cached requests-2.27.1-py2.py3-none-any.whl (63 kB)\n",
            "Collecting babel\n",
            "  Using cached Babel-2.10.1-py3-none-any.whl (9.5 MB)\n",
            "Collecting jsonschema>=3.0.1\n",
            "  Using cached jsonschema-4.4.0-py3-none-any.whl (72 kB)\n",
            "Collecting importlib-metadata>=3.6\n",
            "  Using cached importlib_metadata-4.11.3-py3-none-any.whl (18 kB)\n",
            "Collecting zipp>=0.5\n",
            "  Using cached zipp-3.8.0-py3-none-any.whl (5.4 kB)\n",
            "Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n",
            "  Using cached pyrsistent-0.18.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (117 kB)\n",
            "Collecting importlib-resources>=1.4.0\n",
            "  Using cached importlib_resources-5.7.1-py3-none-any.whl (28 kB)\n",
            "Collecting attrs>=17.4.0\n",
            "  Using cached attrs-21.4.0-py2.py3-none-any.whl (60 kB)\n",
            "Collecting notebook-shim>=0.1.0\n",
            "  Using cached notebook_shim-0.1.0-py3-none-any.whl (13 kB)\n",
            "Collecting notebook<7\n",
            "  Using cached notebook-6.4.11-py3-none-any.whl (9.9 MB)\n",
            "Collecting tinycss2\n",
            "  Using cached tinycss2-1.1.1-py3-none-any.whl (21 kB)\n",
            "Collecting defusedxml\n",
            "  Using cached defusedxml-0.7.1-py2.py3-none-any.whl (25 kB)\n",
            "Collecting beautifulsoup4\n",
            "  Using cached beautifulsoup4-4.11.1-py3-none-any.whl (128 kB)\n",
            "Collecting bleach\n",
            "  Using cached bleach-5.0.0-py3-none-any.whl (160 kB)\n",
            "Collecting mistune<2,>=0.8.1\n",
            "  Using cached mistune-0.8.4-py2.py3-none-any.whl (16 kB)\n",
            "Collecting pandocfilters>=1.4.1\n",
            "  Using cached pandocfilters-1.5.0-py2.py3-none-any.whl (8.7 kB)\n",
            "Collecting jupyterlab-pygments\n",
            "  Using cached jupyterlab_pygments-0.2.2-py2.py3-none-any.whl (21 kB)\n",
            "Collecting nbclient>=0.5.0\n",
            "  Using cached nbclient-0.6.0-py3-none-any.whl (70 kB)\n",
            "Collecting pygments>=2.4.1\n",
            "  Using cached Pygments-2.12.0-py3-none-any.whl (1.1 MB)\n",
            "Collecting fastjsonschema\n",
            "  Using cached fastjsonschema-2.15.3-py3-none-any.whl (22 kB)\n",
            "Collecting notebook<7\n",
            "  Using cached notebook-6.4.10-py3-none-any.whl (9.9 MB)\n",
            "  Using cached notebook-6.4.9-py3-none-any.whl (9.9 MB)\n",
            "  Using cached notebook-6.4.8-py3-none-any.whl (9.9 MB)\n",
            "  Using cached notebook-6.4.7-py3-none-any.whl (9.9 MB)\n",
            "  Using cached notebook-6.4.6-py3-none-any.whl (9.9 MB)\n",
            "  Using cached notebook-6.4.5-py3-none-any.whl (9.9 MB)\n",
            "Collecting ipython-genutils\n",
            "  Using cached ipython_genutils-0.2.0-py2.py3-none-any.whl (26 kB)\n",
            "Collecting ipykernel\n",
            "  Using cached ipykernel-6.13.0-py3-none-any.whl (131 kB)\n",
            "Collecting PyYAML\n",
            "  Using cached PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n",
            "Collecting six>=1.5\n",
            "  Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)\n",
            "Collecting ptyprocess\n",
            "  Using cached ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n",
            "Collecting argon2-cffi-bindings\n",
            "  Using cached argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (86 kB)\n",
            "Collecting cffi>=1.0.1\n",
            "  Using cached cffi-1.15.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (427 kB)\n",
            "Collecting pycparser\n",
            "  Using cached pycparser-2.21-py2.py3-none-any.whl (118 kB)\n",
            "Collecting pytz>=2015.7\n",
            "  Using cached pytz-2022.1-py2.py3-none-any.whl (503 kB)\n",
            "Collecting soupsieve>1.2\n",
            "  Using cached soupsieve-2.3.2.post1-py3-none-any.whl (37 kB)\n",
            "Collecting webencodings\n",
            "  Using cached webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n",
            "Collecting matplotlib-inline>=0.1\n",
            "  Using cached matplotlib_inline-0.1.3-py3-none-any.whl (8.2 kB)\n",
            "Collecting debugpy>=1.0\n",
            "  Using cached debugpy-1.6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.8 MB)\n",
            "Collecting psutil\n",
            "  Using cached psutil-5.9.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (280 kB)\n",
            "Collecting setuptools>=18.5\n",
            "  Using cached setuptools-62.1.0-py3-none-any.whl (1.1 MB)\n",
            "Collecting backcall\n",
            "  Using cached backcall-0.2.0-py2.py3-none-any.whl (11 kB)\n",
            "Collecting pexpect>4.3\n",
            "  Using cached pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n",
            "Collecting decorator\n",
            "  Using cached decorator-5.1.1-py3-none-any.whl (9.1 kB)\n",
            "Collecting pickleshare\n",
            "  Using cached pickleshare-0.7.5-py2.py3-none-any.whl (6.9 kB)\n",
            "Collecting jedi>=0.16\n",
            "  Using cached jedi-0.18.1-py2.py3-none-any.whl (1.6 MB)\n",
            "Collecting prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0\n",
            "  Using cached prompt_toolkit-3.0.29-py3-none-any.whl (381 kB)\n",
            "Collecting parso<0.9.0,>=0.8.0\n",
            "  Using cached parso-0.8.3-py2.py3-none-any.whl (100 kB)\n",
            "Collecting wcwidth\n",
            "  Using cached wcwidth-0.2.5-py2.py3-none-any.whl (30 kB)\n",
            "Collecting pyparsing!=3.0.5,>=2.0.2\n",
            "  Using cached pyparsing-3.0.8-py3-none-any.whl (98 kB)\n",
            "Collecting urllib3<1.27,>=1.21.1\n",
            "  Using cached urllib3-1.26.9-py2.py3-none-any.whl (138 kB)\n",
            "Collecting charset-normalizer~=2.0.0\n",
            "  Using cached charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n",
            "Collecting certifi>=2017.4.17\n",
            "  Using cached certifi-2021.10.8-py2.py3-none-any.whl (149 kB)\n",
            "Building wheels for collected packages: colabcode\n",
            "  Building wheel for colabcode (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for colabcode: filename=colabcode-0.3.0-py3-none-any.whl size=4996 sha256=239b938fb7fb020398d3036f8c5457e822203e09f1faa2cccd5066d50940b918\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-puqqmw4e/wheels/27/d1/3e/ccd4db3c0033459d3ce35ff9cc901610f23bde96067fd418e6\n",
            "Successfully built colabcode\n",
            "Installing collected packages: zipp, typing-extensions, traitlets, six, pyrsistent, importlib-resources, importlib-metadata, attrs, tornado, pyzmq, python-dateutil, pycparser, jupyter-core, jsonschema, fastjsonschema, webencodings, wcwidth, soupsieve, pyparsing, ptyprocess, parso, nest-asyncio, nbformat, MarkupSafe, jupyter-client, cffi, tinycss2, sniffio, setuptools, pygments, prompt-toolkit, pickleshare, pexpect, pandocfilters, packaging, nbclient, mistune, matplotlib-inline, jupyterlab-pygments, jinja2, jedi, idna, entrypoints, defusedxml, decorator, bleach, beautifulsoup4, backcall, argon2-cffi-bindings, websocket-client, terminado, Send2Trash, psutil, prometheus-client, nbconvert, ipython, debugpy, argon2-cffi, anyio, urllib3, pytz, jupyter-server, ipython-genutils, ipykernel, charset-normalizer, certifi, requests, notebook-shim, notebook, json5, babel, PyYAML, nbclassic, jupyterlab-server, h11, click, uvicorn, pyngrok, jupyterlab, colabcode\n",
            "  Attempting uninstall: zipp\n",
            "    Found existing installation: zipp 3.8.0\n",
            "    Uninstalling zipp-3.8.0:\n",
            "      Successfully uninstalled zipp-3.8.0\n",
            "  Attempting uninstall: typing-extensions\n",
            "    Found existing installation: typing-extensions 4.2.0\n",
            "    Uninstalling typing-extensions-4.2.0:\n",
            "      Successfully uninstalled typing-extensions-4.2.0\n",
            "  Attempting uninstall: traitlets\n",
            "    Found existing installation: traitlets 5.1.1\n",
            "    Uninstalling traitlets-5.1.1:\n",
            "      Successfully uninstalled traitlets-5.1.1\n",
            "  Attempting uninstall: six\n",
            "    Found existing installation: six 1.16.0\n",
            "    Uninstalling six-1.16.0:\n",
            "      Successfully uninstalled six-1.16.0\n",
            "  Attempting uninstall: pyrsistent\n",
            "    Found existing installation: pyrsistent 0.18.1\n",
            "    Uninstalling pyrsistent-0.18.1:\n",
            "      Successfully uninstalled pyrsistent-0.18.1\n",
            "  Attempting uninstall: importlib-resources\n",
            "    Found existing installation: importlib-resources 5.7.1\n",
            "    Uninstalling importlib-resources-5.7.1:\n",
            "      Successfully uninstalled importlib-resources-5.7.1\n",
            "  Attempting uninstall: importlib-metadata\n",
            "    Found existing installation: importlib-metadata 4.11.3\n",
            "    Uninstalling importlib-metadata-4.11.3:\n",
            "      Successfully uninstalled importlib-metadata-4.11.3\n",
            "  Attempting uninstall: attrs\n",
            "    Found existing installation: attrs 21.4.0\n",
            "    Uninstalling attrs-21.4.0:\n",
            "      Successfully uninstalled attrs-21.4.0\n",
            "  Attempting uninstall: tornado\n",
            "    Found existing installation: tornado 6.1\n",
            "    Uninstalling tornado-6.1:\n",
            "      Successfully uninstalled tornado-6.1\n",
            "  Attempting uninstall: pyzmq\n",
            "    Found existing installation: pyzmq 22.3.0\n",
            "    Uninstalling pyzmq-22.3.0:\n",
            "      Successfully uninstalled pyzmq-22.3.0\n",
            "  Attempting uninstall: python-dateutil\n",
            "    Found existing installation: python-dateutil 2.8.2\n",
            "    Uninstalling python-dateutil-2.8.2:\n",
            "      Successfully uninstalled python-dateutil-2.8.2\n",
            "  Attempting uninstall: pycparser\n",
            "    Found existing installation: pycparser 2.21\n",
            "    Uninstalling pycparser-2.21:\n",
            "      Successfully uninstalled pycparser-2.21\n",
            "  Attempting uninstall: jupyter-core\n",
            "    Found existing installation: jupyter-core 4.10.0\n",
            "    Uninstalling jupyter-core-4.10.0:\n",
            "      Successfully uninstalled jupyter-core-4.10.0\n",
            "  Attempting uninstall: jsonschema\n",
            "    Found existing installation: jsonschema 4.4.0\n",
            "    Uninstalling jsonschema-4.4.0:\n",
            "      Successfully uninstalled jsonschema-4.4.0\n",
            "  Attempting uninstall: fastjsonschema\n",
            "    Found existing installation: fastjsonschema 2.15.3\n",
            "    Uninstalling fastjsonschema-2.15.3:\n",
            "      Successfully uninstalled fastjsonschema-2.15.3\n",
            "  Attempting uninstall: webencodings\n",
            "    Found existing installation: webencodings 0.5.1\n",
            "    Uninstalling webencodings-0.5.1:\n",
            "      Successfully uninstalled webencodings-0.5.1\n",
            "  Attempting uninstall: wcwidth\n",
            "    Found existing installation: wcwidth 0.2.5\n",
            "    Uninstalling wcwidth-0.2.5:\n",
            "      Successfully uninstalled wcwidth-0.2.5\n",
            "  Attempting uninstall: soupsieve\n",
            "    Found existing installation: soupsieve 2.3.2.post1\n",
            "    Uninstalling soupsieve-2.3.2.post1:\n",
            "      Successfully uninstalled soupsieve-2.3.2.post1\n",
            "  Attempting uninstall: pyparsing\n",
            "    Found existing installation: pyparsing 3.0.8\n",
            "    Uninstalling pyparsing-3.0.8:\n",
            "      Successfully uninstalled pyparsing-3.0.8\n",
            "  Attempting uninstall: ptyprocess\n",
            "    Found existing installation: ptyprocess 0.7.0\n",
            "    Uninstalling ptyprocess-0.7.0:\n",
            "      Successfully uninstalled ptyprocess-0.7.0\n",
            "  Attempting uninstall: parso\n",
            "    Found existing installation: parso 0.8.3\n",
            "    Uninstalling parso-0.8.3:\n",
            "      Successfully uninstalled parso-0.8.3\n",
            "  Attempting uninstall: nest-asyncio\n",
            "    Found existing installation: nest-asyncio 1.4.3\n",
            "    Uninstalling nest-asyncio-1.4.3:\n",
            "      Successfully uninstalled nest-asyncio-1.4.3\n",
            "  Attempting uninstall: nbformat\n",
            "    Found existing installation: nbformat 5.3.0\n",
            "    Uninstalling nbformat-5.3.0:\n",
            "      Successfully uninstalled nbformat-5.3.0\n",
            "  Attempting uninstall: MarkupSafe\n",
            "    Found existing installation: MarkupSafe 2.1.1\n",
            "    Uninstalling MarkupSafe-2.1.1:\n",
            "      Successfully uninstalled MarkupSafe-2.1.1\n",
            "  Attempting uninstall: jupyter-client\n",
            "    Found existing installation: jupyter-client 6.1.12\n",
            "    Uninstalling jupyter-client-6.1.12:\n",
            "      Successfully uninstalled jupyter-client-6.1.12\n",
            "  Attempting uninstall: cffi\n",
            "    Found existing installation: cffi 1.15.0\n",
            "    Uninstalling cffi-1.15.0:\n",
            "      Successfully uninstalled cffi-1.15.0\n",
            "  Attempting uninstall: tinycss2\n",
            "    Found existing installation: tinycss2 1.1.1\n",
            "    Uninstalling tinycss2-1.1.1:\n",
            "      Successfully uninstalled tinycss2-1.1.1\n",
            "  Attempting uninstall: sniffio\n",
            "    Found existing installation: sniffio 1.2.0\n",
            "    Uninstalling sniffio-1.2.0:\n",
            "      Successfully uninstalled sniffio-1.2.0\n",
            "  Attempting uninstall: setuptools\n",
            "    Found existing installation: setuptools 62.1.0\n",
            "    Uninstalling setuptools-62.1.0:\n",
            "      Successfully uninstalled setuptools-62.1.0\n",
            "  Attempting uninstall: pygments\n",
            "    Found existing installation: Pygments 2.12.0\n",
            "    Uninstalling Pygments-2.12.0:\n",
            "      Successfully uninstalled Pygments-2.12.0\n",
            "  Attempting uninstall: prompt-toolkit\n",
            "    Found existing installation: prompt-toolkit 3.0.29\n",
            "    Uninstalling prompt-toolkit-3.0.29:\n",
            "      Successfully uninstalled prompt-toolkit-3.0.29\n",
            "  Attempting uninstall: pickleshare\n",
            "    Found existing installation: pickleshare 0.7.5\n",
            "    Uninstalling pickleshare-0.7.5:\n",
            "      Successfully uninstalled pickleshare-0.7.5\n",
            "  Attempting uninstall: pexpect\n",
            "    Found existing installation: pexpect 4.8.0\n",
            "    Uninstalling pexpect-4.8.0:\n",
            "      Successfully uninstalled pexpect-4.8.0\n",
            "  Attempting uninstall: pandocfilters\n",
            "    Found existing installation: pandocfilters 1.5.0\n",
            "    Uninstalling pandocfilters-1.5.0:\n",
            "      Successfully uninstalled pandocfilters-1.5.0\n",
            "  Attempting uninstall: packaging\n",
            "    Found existing installation: packaging 21.3\n",
            "    Uninstalling packaging-21.3:\n",
            "      Successfully uninstalled packaging-21.3\n",
            "  Attempting uninstall: nbclient\n",
            "    Found existing installation: nbclient 0.6.0\n",
            "    Uninstalling nbclient-0.6.0:\n",
            "      Successfully uninstalled nbclient-0.6.0\n",
            "  Attempting uninstall: mistune\n",
            "    Found existing installation: mistune 0.8.4\n",
            "    Uninstalling mistune-0.8.4:\n",
            "      Successfully uninstalled mistune-0.8.4\n",
            "  Attempting uninstall: matplotlib-inline\n",
            "    Found existing installation: matplotlib-inline 0.1.3\n",
            "    Uninstalling matplotlib-inline-0.1.3:\n",
            "      Successfully uninstalled matplotlib-inline-0.1.3\n",
            "  Attempting uninstall: jupyterlab-pygments\n",
            "    Found existing installation: jupyterlab-pygments 0.2.2\n",
            "    Uninstalling jupyterlab-pygments-0.2.2:\n",
            "      Successfully uninstalled jupyterlab-pygments-0.2.2\n",
            "  Attempting uninstall: jinja2\n",
            "    Found existing installation: Jinja2 3.1.2\n",
            "    Uninstalling Jinja2-3.1.2:\n",
            "      Successfully uninstalled Jinja2-3.1.2\n",
            "  Attempting uninstall: jedi\n",
            "    Found existing installation: jedi 0.18.1\n",
            "    Uninstalling jedi-0.18.1:\n",
            "      Successfully uninstalled jedi-0.18.1\n",
            "  Attempting uninstall: idna\n",
            "    Found existing installation: idna 3.3\n",
            "    Uninstalling idna-3.3:\n",
            "      Successfully uninstalled idna-3.3\n",
            "  Attempting uninstall: entrypoints\n",
            "    Found existing installation: entrypoints 0.4\n",
            "    Uninstalling entrypoints-0.4:\n",
            "      Successfully uninstalled entrypoints-0.4\n",
            "  Attempting uninstall: defusedxml\n",
            "    Found existing installation: defusedxml 0.7.1\n",
            "    Uninstalling defusedxml-0.7.1:\n",
            "      Successfully uninstalled defusedxml-0.7.1\n",
            "  Attempting uninstall: decorator\n",
            "    Found existing installation: decorator 5.1.1\n",
            "    Uninstalling decorator-5.1.1:\n",
            "      Successfully uninstalled decorator-5.1.1\n",
            "  Attempting uninstall: bleach\n",
            "    Found existing installation: bleach 5.0.0\n",
            "    Uninstalling bleach-5.0.0:\n",
            "      Successfully uninstalled bleach-5.0.0\n",
            "  Attempting uninstall: beautifulsoup4\n",
            "    Found existing installation: beautifulsoup4 4.11.1\n",
            "    Uninstalling beautifulsoup4-4.11.1:\n",
            "      Successfully uninstalled beautifulsoup4-4.11.1\n",
            "  Attempting uninstall: backcall\n",
            "    Found existing installation: backcall 0.2.0\n",
            "    Uninstalling backcall-0.2.0:\n",
            "      Successfully uninstalled backcall-0.2.0\n",
            "  Attempting uninstall: argon2-cffi-bindings\n",
            "    Found existing installation: argon2-cffi-bindings 21.2.0\n",
            "    Uninstalling argon2-cffi-bindings-21.2.0:\n",
            "      Successfully uninstalled argon2-cffi-bindings-21.2.0\n",
            "  Attempting uninstall: websocket-client\n",
            "    Found existing installation: websocket-client 1.3.2\n",
            "    Uninstalling websocket-client-1.3.2:\n",
            "      Successfully uninstalled websocket-client-1.3.2\n",
            "  Attempting uninstall: terminado\n",
            "    Found existing installation: terminado 0.13.3\n",
            "    Uninstalling terminado-0.13.3:\n",
            "      Successfully uninstalled terminado-0.13.3\n",
            "  Attempting uninstall: Send2Trash\n",
            "    Found existing installation: Send2Trash 1.8.0\n",
            "    Uninstalling Send2Trash-1.8.0:\n",
            "      Successfully uninstalled Send2Trash-1.8.0\n",
            "  Attempting uninstall: psutil\n",
            "    Found existing installation: psutil 5.9.0\n",
            "    Uninstalling psutil-5.9.0:\n",
            "      Successfully uninstalled psutil-5.9.0\n",
            "  Attempting uninstall: prometheus-client\n",
            "    Found existing installation: prometheus-client 0.14.1\n",
            "    Uninstalling prometheus-client-0.14.1:\n",
            "      Successfully uninstalled prometheus-client-0.14.1\n",
            "  Attempting uninstall: nbconvert\n",
            "    Found existing installation: nbconvert 6.5.0\n",
            "    Uninstalling nbconvert-6.5.0:\n",
            "      Successfully uninstalled nbconvert-6.5.0\n",
            "  Attempting uninstall: ipython\n",
            "    Found existing installation: ipython 7.33.0\n",
            "    Uninstalling ipython-7.33.0:\n",
            "      Successfully uninstalled ipython-7.33.0\n",
            "  Attempting uninstall: debugpy\n",
            "    Found existing installation: debugpy 1.6.0\n",
            "    Uninstalling debugpy-1.6.0:\n",
            "      Successfully uninstalled debugpy-1.6.0\n",
            "  Attempting uninstall: argon2-cffi\n",
            "    Found existing installation: argon2-cffi 21.3.0\n",
            "    Uninstalling argon2-cffi-21.3.0:\n",
            "      Successfully uninstalled argon2-cffi-21.3.0\n",
            "  Attempting uninstall: anyio\n",
            "    Found existing installation: anyio 3.5.0\n",
            "    Uninstalling anyio-3.5.0:\n",
            "      Successfully uninstalled anyio-3.5.0\n",
            "  Attempting uninstall: urllib3\n",
            "    Found existing installation: urllib3 1.26.9\n",
            "    Uninstalling urllib3-1.26.9:\n",
            "      Successfully uninstalled urllib3-1.26.9\n",
            "  Attempting uninstall: pytz\n",
            "    Found existing installation: pytz 2022.1\n",
            "    Uninstalling pytz-2022.1:\n",
            "      Successfully uninstalled pytz-2022.1\n",
            "  Attempting uninstall: jupyter-server\n",
            "    Found existing installation: jupyter-server 1.17.0\n",
            "    Uninstalling jupyter-server-1.17.0:\n",
            "      Successfully uninstalled jupyter-server-1.17.0\n",
            "  Attempting uninstall: ipython-genutils\n",
            "    Found existing installation: ipython-genutils 0.2.0\n",
            "    Uninstalling ipython-genutils-0.2.0:\n",
            "      Successfully uninstalled ipython-genutils-0.2.0\n",
            "  Attempting uninstall: ipykernel\n",
            "    Found existing installation: ipykernel 6.13.0\n",
            "    Uninstalling ipykernel-6.13.0:\n",
            "      Successfully uninstalled ipykernel-6.13.0\n",
            "  Attempting uninstall: charset-normalizer\n",
            "    Found existing installation: charset-normalizer 2.0.12\n",
            "    Uninstalling charset-normalizer-2.0.12:\n",
            "      Successfully uninstalled charset-normalizer-2.0.12\n",
            "  Attempting uninstall: certifi\n",
            "    Found existing installation: certifi 2021.10.8\n",
            "    Uninstalling certifi-2021.10.8:\n",
            "      Successfully uninstalled certifi-2021.10.8\n",
            "  Attempting uninstall: requests\n",
            "    Found existing installation: requests 2.27.1\n",
            "    Uninstalling requests-2.27.1:\n",
            "      Successfully uninstalled requests-2.27.1\n",
            "  Attempting uninstall: notebook-shim\n",
            "    Found existing installation: notebook-shim 0.1.0\n",
            "    Uninstalling notebook-shim-0.1.0:\n",
            "      Successfully uninstalled notebook-shim-0.1.0\n",
            "  Attempting uninstall: notebook\n",
            "    Found existing installation: notebook 6.4.5\n",
            "    Uninstalling notebook-6.4.5:\n",
            "      Successfully uninstalled notebook-6.4.5\n",
            "  Attempting uninstall: json5\n",
            "    Found existing installation: json5 0.9.6\n",
            "    Uninstalling json5-0.9.6:\n",
            "      Successfully uninstalled json5-0.9.6\n",
            "  Attempting uninstall: babel\n",
            "    Found existing installation: Babel 2.10.1\n",
            "    Uninstalling Babel-2.10.1:\n",
            "      Successfully uninstalled Babel-2.10.1\n",
            "  Attempting uninstall: PyYAML\n",
            "    Found existing installation: PyYAML 6.0\n",
            "    Uninstalling PyYAML-6.0:\n",
            "      Successfully uninstalled PyYAML-6.0\n",
            "  Attempting uninstall: nbclassic\n",
            "    Found existing installation: nbclassic 0.3.7\n",
            "    Uninstalling nbclassic-0.3.7:\n",
            "      Successfully uninstalled nbclassic-0.3.7\n",
            "  Attempting uninstall: jupyterlab-server\n",
            "    Found existing installation: jupyterlab-server 2.13.0\n",
            "    Uninstalling jupyterlab-server-2.13.0:\n",
            "      Successfully uninstalled jupyterlab-server-2.13.0\n",
            "  Attempting uninstall: h11\n",
            "    Found existing installation: h11 0.13.0\n",
            "    Uninstalling h11-0.13.0:\n",
            "      Successfully uninstalled h11-0.13.0\n",
            "  Attempting uninstall: click\n",
            "    Found existing installation: click 7.1.2\n",
            "    Uninstalling click-7.1.2:\n",
            "      Successfully uninstalled click-7.1.2\n",
            "  Attempting uninstall: uvicorn\n",
            "    Found existing installation: uvicorn 0.13.1\n",
            "    Uninstalling uvicorn-0.13.1:\n",
            "      Successfully uninstalled uvicorn-0.13.1\n",
            "  Attempting uninstall: pyngrok\n",
            "    Found existing installation: pyngrok 5.1.0\n",
            "    Uninstalling pyngrok-5.1.0:\n",
            "      Successfully uninstalled pyngrok-5.1.0\n",
            "  Attempting uninstall: jupyterlab\n",
            "    Found existing installation: jupyterlab 3.0.7\n",
            "    Uninstalling jupyterlab-3.0.7:\n",
            "      Successfully uninstalled jupyterlab-3.0.7\n",
            "  Attempting uninstall: colabcode\n",
            "    Found existing installation: colabcode 0.3.0\n",
            "    Uninstalling colabcode-0.3.0:\n",
            "      Successfully uninstalled colabcode-0.3.0\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "tensorflow 2.8.0 requires tf-estimator-nightly==2.8.0.dev2021122109, which is not installed.\n",
            "moviepy 0.2.3.5 requires decorator<5.0,>=4.0.2, but you have decorator 5.1.1 which is incompatible.\n",
            "jupyter-console 5.2.0 requires prompt-toolkit<2.0.0,>=1.0.0, but you have prompt-toolkit 3.0.29 which is incompatible.\n",
            "google-colab 1.0.0 requires ipykernel~=4.10, but you have ipykernel 6.13.0 which is incompatible.\n",
            "google-colab 1.0.0 requires ipython~=5.5.0, but you have ipython 7.33.0 which is incompatible.\n",
            "google-colab 1.0.0 requires notebook~=5.3.0; python_version >= \"3.0\", but you have notebook 6.4.5 which is incompatible.\n",
            "google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.27.1 which is incompatible.\n",
            "google-colab 1.0.0 requires six~=1.15.0, but you have six 1.16.0 which is incompatible.\n",
            "google-colab 1.0.0 requires tornado~=5.1.0; python_version >= \"3.0\", but you have tornado 6.1 which is incompatible.\n",
            "flask 1.1.4 requires Jinja2<3.0,>=2.10.1, but you have jinja2 3.1.2 which is incompatible.\n",
            "datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Successfully installed MarkupSafe-2.1.1 PyYAML-6.0 Send2Trash-1.8.0 anyio-3.5.0 argon2-cffi-21.3.0 argon2-cffi-bindings-21.2.0 attrs-21.4.0 babel-2.10.1 backcall-0.2.0 beautifulsoup4-4.11.1 bleach-5.0.0 certifi-2021.10.8 cffi-1.15.0 charset-normalizer-2.0.12 click-7.1.2 colabcode-0.3.0 debugpy-1.6.0 decorator-5.1.1 defusedxml-0.7.1 entrypoints-0.4 fastjsonschema-2.15.3 h11-0.13.0 idna-3.3 importlib-metadata-4.11.3 importlib-resources-5.7.1 ipykernel-6.13.0 ipython-7.33.0 ipython-genutils-0.2.0 jedi-0.18.1 jinja2-3.1.2 json5-0.9.6 jsonschema-4.4.0 jupyter-client-6.1.12 jupyter-core-4.10.0 jupyter-server-1.17.0 jupyterlab-3.0.7 jupyterlab-pygments-0.2.2 jupyterlab-server-2.13.0 matplotlib-inline-0.1.3 mistune-0.8.4 nbclassic-0.3.7 nbclient-0.6.0 nbconvert-6.5.0 nbformat-5.3.0 nest-asyncio-1.4.3 notebook-6.4.5 notebook-shim-0.1.0 packaging-21.3 pandocfilters-1.5.0 parso-0.8.3 pexpect-4.8.0 pickleshare-0.7.5 prometheus-client-0.14.1 prompt-toolkit-3.0.29 psutil-5.9.0 ptyprocess-0.7.0 pycparser-2.21 pygments-2.12.0 pyngrok-5.1.0 pyparsing-3.0.8 pyrsistent-0.18.1 python-dateutil-2.8.2 pytz-2022.1 pyzmq-22.3.0 requests-2.27.1 setuptools-62.1.0 six-1.16.0 sniffio-1.2.0 soupsieve-2.3.2.post1 terminado-0.13.3 tinycss2-1.1.1 tornado-6.1 traitlets-5.1.1 typing-extensions-4.2.0 urllib3-1.26.9 uvicorn-0.13.1 wcwidth-0.2.5 webencodings-0.5.1 websocket-client-1.3.2 zipp-3.8.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "IPython",
                  "_distutils_hack",
                  "cffi",
                  "dateutil",
                  "debugpy",
                  "decorator",
                  "importlib_metadata",
                  "ipykernel",
                  "ipython_genutils",
                  "jedi",
                  "jupyter_client",
                  "jupyter_core",
                  "matplotlib_inline",
                  "packaging",
                  "parso",
                  "pexpect",
                  "pickleshare",
                  "pkg_resources",
                  "prompt_toolkit",
                  "psutil",
                  "pygments",
                  "setuptools",
                  "six",
                  "tornado",
                  "traitlets",
                  "wcwidth",
                  "zipp",
                  "zmq"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!code-server --version"
      ],
      "metadata": {
        "id": "KJ9YuqqgSnPn",
        "outputId": "6ddb32c3-c834-4e01-d695-b7c7131357d9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/bin/bash: code-server: command not found\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from colabcode import ColabCode\n",
        "ColabCode(port=10000, authtoken='28ZEsu7V8JE5UF30jBjKfGPbSuE_2rnpCV1pcMzuX2ZjztZUw', mount_drive=True)"
      ],
      "metadata": {
        "id": "C_pqvfEvPZYu",
        "outputId": "05dfb95d-8b78-4de9-85d8-751f09c00378",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "--2022-05-01 20:25:24--  https://code-server.dev/install.sh\n",
            "Resolving code-server.dev (code-server.dev)... 104.21.16.171, 172.67.214.225, 2606:4700:3035::6815:10ab, ...\n",
            "Connecting to code-server.dev (code-server.dev)|104.21.16.171|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/cdr/code-server/main/install.sh [following]\n",
            "--2022-05-01 20:25:25--  https://raw.githubusercontent.com/cdr/code-server/main/install.sh\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.110.133, 185.199.111.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 15572 (15K) [text/plain]\n",
            "Saving to: ‘install.sh’\n",
            "\n",
            "     0K .......... .....                                      100% 32.5M=0s\n",
            "\n",
            "2022-05-01 20:25:25 (32.5 MB/s) - ‘install.sh’ saved [15572/15572]\n",
            "\n",
            "######################################################################## 100.0%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2022-05-01T20:25:38.879Z] info  Wrote default config file to ~/.config/code-server/config.yaml\n",
            "Installing extensions...\n",
            "Installing extension 'ms-python.python'...\n",
            "Extension 'ms-python.python' v2022.4.1 was successfully installed.\n",
            "Installing extensions...\n",
            "Extension 'ms-toolsai.jupyter' v2022.3.1000752054 is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: 'ms-toolsai.jupyter@1.2.3'.\n",
            "Installing extensions...\n",
            "Installing extension 'mechatroner.rainbow-csv'...\n",
            "Extension 'mechatroner.rainbow-csv' v2.0.0 was successfully installed.\n",
            "Installing extensions...\n",
            "Installing extension 'vscode-icons-team.vscode-icons'...\n",
            "Extension 'vscode-icons-team.vscode-icons' v11.11.0 was successfully installed.\n",
            "Code Server can be accessed on: NgrokTunnel: \"https://9a19-35-196-73-31.ngrok.io\" -> \"http://localhost:10000\"\n",
            "Mounted at /content/drive\n",
            "[2022-05-01T20:26:30.500Z] info  code-server 4.3.0 09bc30027a7fbba170f907a527eaa9f7219fe739\n",
            "[2022-05-01T20:26:30.501Z] info  Using user-data-dir ~/.local/share/code-server\n",
            "[2022-05-01T20:26:30.537Z] info  Using config file ~/.config/code-server/config.yaml\n",
            "[2022-05-01T20:26:30.537Z] info  HTTP server listening on http://127.0.0.1:10000/ \n",
            "[2022-05-01T20:26:30.538Z] info    - Authentication is disabled \n",
            "[2022-05-01T20:26:30.538Z] info    - Not serving HTTPS \n",
            "[20:26:45] Extension host agent started.\n",
            "[20:26:51] [127.0.0.1][0716b55e][ManagementConnection] New connection established.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[20:26:51] Switching to using in-memory credential store instead because Keytar failed to load: Cannot find module '../build/Release/keytar.node'\n",
            "Require stack:\n",
            "- /usr/lib/code-server/lib/vscode/node_modules/keytar/lib/keytar.js\n",
            "- /usr/lib/code-server/lib/vscode/out/bootstrap-amd.js\n",
            "- /usr/lib/code-server/out/node/util.js\n",
            "- /usr/lib/code-server/out/node/cli.js\n",
            "- /usr/lib/code-server/out/node/entry.js\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[20:26:52] [127.0.0.1][62890fa0][ExtensionHostConnection] New connection established.\n",
            "[20:26:52] [127.0.0.1][62890fa0][ExtensionHostConnection] <859> Launched Extension Host Process.\n",
            "[20:28:25] [127.0.0.1][0716b55e][ManagementConnection] The client has disconnected gracefully, so the connection will be disposed.\n",
            "[20:28:25] [127.0.0.1][62890fa0][ExtensionHostConnection] <859> Extension Host Process exited with code: 0, signal: null.\n",
            "[20:28:27] [127.0.0.1][9da97f50][ManagementConnection] New connection established.\n",
            "[20:28:28] [127.0.0.1][e3b9e9a5][ExtensionHostConnection] New connection established.\n",
            "[20:28:28] [127.0.0.1][e3b9e9a5][ExtensionHostConnection] <927> Launched Extension Host Process.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A4mttyYlPNVm"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import Image\n",
        "from matplotlib import cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wc61oR7APNVq"
      },
      "outputs": [],
      "source": [
        "import rasterio as rio\n",
        "import pandas as pd\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qI37LyGiPNVq"
      },
      "source": [
        "# Data Load"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Vh78L-yEPNVs"
      },
      "outputs": [],
      "source": [
        "data = rio.open('sentinel_nrcan.tif')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1Tb52AQGPNVt",
        "outputId": "60b111f0-39b0-4da4-d170-d74f44e07db1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2500 1771 13 BoundingBox(left=-74.171447754, bottom=45.96451541520898, right=-71.7489624024375, top=47.144897486) \n",
            " | 0.00, 0.00,-74.17|\n",
            "| 0.00,-0.00, 47.14|\n",
            "| 0.00, 0.00, 1.00| \n",
            " EPSG:4326\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "4427500"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(data.width, data.height, data.count, data.bounds, f\"\\n {data.transform}\", \"\\n\", data.crs)\n",
        "width = data.width\n",
        "height = data.height\n",
        "height*width"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-_S6bXV9PNVv"
      },
      "outputs": [],
      "source": [
        "data_list = []\n",
        "for i in range(13):\n",
        "    if i < 9:\n",
        "        name = f'band{i+1:02d}'\n",
        "    elif (i == 9)  | (i == 10):\n",
        "        name = f'band{i+2:02d}'\n",
        "    elif i == 11:\n",
        "        name = f'band8a'\n",
        "    elif i == 12:\n",
        "        name = f'land_type'\n",
        "    band_i = pd.Series(data.read(i+1).flatten(), name=name)\n",
        "    data_list.append(band_i)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HDg26POmPNVw",
        "outputId": "7504cd05-a140-4387-f0ee-0d8897d96b65"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "band01 0.3068\n",
            "band02 0.2572\n",
            "band03 0.2449\n",
            "band04 0.2263\n",
            "band05 0.2482\n",
            "band06 0.2813\n",
            "band07 0.2894\n",
            "band08 0.2943\n",
            "band09 0.3833\n",
            "band11 0.2308\n",
            "band12 0.1814\n",
            "band8a 0.2921\n",
            "land_type 6.0\n"
          ]
        }
      ],
      "source": [
        "for i in range(13):\n",
        "    print(data_list[i].name, data_list[i][1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yvmZ6h8GPNVx"
      },
      "outputs": [],
      "source": [
        "df_raw = pd.concat(data_list, axis=1, keys=[s.name for s in data_list])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CewCIfv0PNVy",
        "outputId": "c6c3c7ef-03b7-4111-dc7b-52c4bada3780"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>band01</th>\n",
              "      <th>band02</th>\n",
              "      <th>band03</th>\n",
              "      <th>band04</th>\n",
              "      <th>band05</th>\n",
              "      <th>band06</th>\n",
              "      <th>band07</th>\n",
              "      <th>band08</th>\n",
              "      <th>band09</th>\n",
              "      <th>band11</th>\n",
              "      <th>band12</th>\n",
              "      <th>band8a</th>\n",
              "      <th>land_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.2226</td>\n",
              "      <td>0.2033</td>\n",
              "      <td>0.2095</td>\n",
              "      <td>0.1944</td>\n",
              "      <td>0.2104</td>\n",
              "      <td>0.2375</td>\n",
              "      <td>0.2358</td>\n",
              "      <td>0.2584</td>\n",
              "      <td>0.3188</td>\n",
              "      <td>0.1967</td>\n",
              "      <td>0.1273</td>\n",
              "      <td>0.2301</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.3068</td>\n",
              "      <td>0.2572</td>\n",
              "      <td>0.2449</td>\n",
              "      <td>0.2263</td>\n",
              "      <td>0.2482</td>\n",
              "      <td>0.2813</td>\n",
              "      <td>0.2894</td>\n",
              "      <td>0.2943</td>\n",
              "      <td>0.3833</td>\n",
              "      <td>0.2308</td>\n",
              "      <td>0.1814</td>\n",
              "      <td>0.2921</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.3851</td>\n",
              "      <td>0.3290</td>\n",
              "      <td>0.3116</td>\n",
              "      <td>0.3010</td>\n",
              "      <td>0.3312</td>\n",
              "      <td>0.3579</td>\n",
              "      <td>0.3695</td>\n",
              "      <td>0.3420</td>\n",
              "      <td>0.4621</td>\n",
              "      <td>0.2969</td>\n",
              "      <td>0.2354</td>\n",
              "      <td>0.3778</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.4392</td>\n",
              "      <td>0.4069</td>\n",
              "      <td>0.3865</td>\n",
              "      <td>0.3774</td>\n",
              "      <td>0.4114</td>\n",
              "      <td>0.4332</td>\n",
              "      <td>0.4422</td>\n",
              "      <td>0.4113</td>\n",
              "      <td>0.5130</td>\n",
              "      <td>0.3676</td>\n",
              "      <td>0.3126</td>\n",
              "      <td>0.4477</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.4378</td>\n",
              "      <td>0.4235</td>\n",
              "      <td>0.4058</td>\n",
              "      <td>0.3930</td>\n",
              "      <td>0.4168</td>\n",
              "      <td>0.4282</td>\n",
              "      <td>0.4254</td>\n",
              "      <td>0.4364</td>\n",
              "      <td>0.5176</td>\n",
              "      <td>0.3687</td>\n",
              "      <td>0.2783</td>\n",
              "      <td>0.4234</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   band01  band02  band03  band04  band05  band06  band07  band08  band09  \\\n",
              "0  0.2226  0.2033  0.2095  0.1944  0.2104  0.2375  0.2358  0.2584  0.3188   \n",
              "1  0.3068  0.2572  0.2449  0.2263  0.2482  0.2813  0.2894  0.2943  0.3833   \n",
              "2  0.3851  0.3290  0.3116  0.3010  0.3312  0.3579  0.3695  0.3420  0.4621   \n",
              "3  0.4392  0.4069  0.3865  0.3774  0.4114  0.4332  0.4422  0.4113  0.5130   \n",
              "4  0.4378  0.4235  0.4058  0.3930  0.4168  0.4282  0.4254  0.4364  0.5176   \n",
              "\n",
              "   band11  band12  band8a  land_type  \n",
              "0  0.1967  0.1273  0.2301        1.0  \n",
              "1  0.2308  0.1814  0.2921        6.0  \n",
              "2  0.2969  0.2354  0.3778        6.0  \n",
              "3  0.3676  0.3126  0.4477        1.0  \n",
              "4  0.3687  0.2783  0.4234        1.0  "
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_raw.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mhfS4KmoPNVz",
        "outputId": "32403fef-208f-4029-bbed-ff7b661f6c17"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "6.0     1535146\n",
              "5.0     1131918\n",
              "15.0     803409\n",
              "1.0      347161\n",
              "18.0     338687\n",
              "17.0     151530\n",
              "8.0       40241\n",
              "14.0      36066\n",
              "16.0      26417\n",
              "10.0      16925\n",
              "Name: land_type, dtype: int64"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_raw.land_type.value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xItYonUBPNVz"
      },
      "source": [
        "# ML Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2C6BMIafPNVz"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ivAcFqcSPNV0"
      },
      "source": [
        "## Data prep"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vmfapFGePNV0"
      },
      "outputs": [],
      "source": [
        "SAMPLE_SIZE = int(5e3)\n",
        "df = df_raw[0:SAMPLE_SIZE]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IMTp8vRpPNV0",
        "outputId": "c1fcb12a-4e69-4e6c-b013-d78f8adf7dab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "6.0     2230\n",
              "5.0     1197\n",
              "1.0      804\n",
              "18.0     437\n",
              "8.0      129\n",
              "14.0      79\n",
              "10.0      68\n",
              "16.0      44\n",
              "17.0      10\n",
              "15.0       2\n",
              "Name: land_type, dtype: int64"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.land_type.value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pN-zZZHEPNV1"
      },
      "source": [
        "### Normalizing feature values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "87CpqY9qPNV1"
      },
      "outputs": [],
      "source": [
        "y = df.land_type\n",
        "X = df.drop(['land_type'], axis=1)\n",
        "columns = X.columns\n",
        "\n",
        "# Standardize features by removing the mean and scaling to unit variance\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ia3YUpg0PNV1"
      },
      "source": [
        "## Training the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9oLfLHlIPNV1",
        "outputId": "677f5ea7-83d1-4b1c-d893-3d891b67b32e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(4000, 12) (1000, 12) (4000,) (1000,)\n"
          ]
        }
      ],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RkJa9--sPNV1"
      },
      "outputs": [],
      "source": [
        "clf=RandomForestClassifier(n_estimators=200, max_features='sqrt', min_samples_leaf=2, max_depth=10)\n",
        "clf.fit(X_train,y_train)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pNSek-15PNV2"
      },
      "source": [
        "## Prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kyF4j6d_PNV2"
      },
      "outputs": [],
      "source": [
        "y_pred=clf.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oj-6Q1e1PNV2",
        "outputId": "a2726f66-39c5-4e34-ed40-2f5246cddd77"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.496\n"
          ]
        }
      ],
      "source": [
        "print(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sif9A_JOPNV2",
        "outputId": "7ef9ea83-0c54-4535-8a66-f08fe593756c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  5.,\n",
              "        6.,  1.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  5.,  6.,  6.,\n",
              "        6.,  6.,  6.,  1.,  6.,  1.,  6.,  6.,  6.,  6.,  6.,  1.,  6.,\n",
              "        6.,  6.,  6.,  5.,  5.,  5.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,\n",
              "        6.,  1.,  6.,  6.,  6.,  5.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,\n",
              "       18.,  5.,  6.,  6.,  6.,  6.,  6., 18.,  5.,  6.,  6.,  6.,  5.,\n",
              "        6.,  6.,  6.,  6.,  6.,  6.,  6.,  6.,  5.,  6.,  6.,  6.,  6.,\n",
              "        6.,  6.,  6.,  6.,  6.,  1., 18., 18.,  6.], dtype=float32)"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_pred[0:100]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "shdKPSPcPNV3"
      },
      "source": [
        "### Confusion matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oF_hEOBsPNV3",
        "outputId": "9f1595e6-7955-4d49-9d1d-235b2d9cd7a0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1080x1080 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from matplotlib.colors import LogNorm, Normalize\n",
        "results = confusion_matrix(y_test, y_pred)\n",
        "df_cm = pd.DataFrame(results, range(10), range(10))\n",
        "plt.figure(figsize=(15,15))\n",
        "sns.set(font_scale=1.4) # for label size\n",
        "sns.heatmap(df_cm, annot=True, annot_kws={\"size\": 16}, norm=LogNorm()) # font size\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jgqTp6-oPNV3"
      },
      "source": [
        "## Model Interpretation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7SECVYP4PNV3",
        "outputId": "3e00194a-2300-47a8-bf5c-df6347f32d37"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "12    0.104299\n",
              "11    0.101436\n",
              "9     0.099431\n",
              "1     0.095801\n",
              "8a    0.094142\n",
              "8     0.085731\n",
              "7     0.078586\n",
              "2     0.077536\n",
              "5     0.066588\n",
              "6     0.066498\n",
              "4     0.065195\n",
              "3     0.064757\n",
              "dtype: float64"
            ]
          },
          "execution_count": 82,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.Series(clf.feature_importances_, index=['1', '2', '3', '4', '5', '6', '7', '8','9','11','12','8a']).sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-LGeZh-kPNV3"
      },
      "source": [
        "# Data visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FjeLTgl3PNV3"
      },
      "outputs": [],
      "source": [
        "#### Example plotting functions to display S2 data in Python\n",
        "\n",
        "def show_band_matrix():\n",
        "    fig, axes = plt.subplots(nrows=3, ncols=6, figsize=(50,25))\n",
        "    plt.suptitle(\"Sentinel-2 Bands\", fontsize=60)\n",
        "    band_count = 1\n",
        "    for i,ax_row in enumerate(axes):\n",
        "        for j, ax_col in enumerate(ax_row):\n",
        "            if i == 0: # Multichannel bands\n",
        "                title = IMG_TITLES[j]\n",
        "                imband = np.asarray([np.asarray(df[BAND_NAMES[j]]).reshape( \\\n",
        "                         WIDTH, HEIGHT), np.asarray(df[BAND_NAMES[j]+'_1']).reshape(WIDTH, \\\n",
        "                         HEIGHT), np.asarray(df[BAND_NAMES[j]+'_1_2']).reshape(WIDTH, HEIGHT)]).T\n",
        "            elif i == 2 and j == 3: # Special case for 8a band\n",
        "                title = 'b8a'\n",
        "                imband = np.asarray(df[title]).reshape(WIDTH, HEIGHT).T\n",
        "                band_count += 1\n",
        "            else: # Individual bands\n",
        "                title = 'b' + str(band_count).zfill(2)\n",
        "                imband = np.asarray(df[title]).reshape(WIDTH, HEIGHT).T\n",
        "                band_count += 1\n",
        "            \n",
        "            axes[i][j].set_title(title)\n",
        "            axes[i][j].imshow(imband, aspect='auto')\n",
        "            axes[i][j].set_axis_off()\n",
        "\n",
        "def show_land_cover():\n",
        "    fig, (ax, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(40,15))\n",
        "    ax.set_title(\"NRCan - 2015 Land Cover of Canada\")\n",
        "    cmap = cm.get_cmap('jet', 7)    # 11 discrete colors\n",
        "    im = ax.imshow(np.asarray(df.land_cover).reshape(WIDTH, HEIGHT).T, cmap=cmap, aspect='auto')\n",
        "    ax.set_axis_off()\n",
        "    cbar = plt.colorbar(im, ax=ax)\n",
        "    tick_locs = (np.arange(7) + 0.5)*(7-1)/7\n",
        "    cbar.set_ticks(tick_locs)\n",
        "    cbar.set_ticklabels(LAND_COVER_TYPES)\n",
        "    \n",
        "    ax2.grid(linestyle='--')\n",
        "    dp = sns.distplot(df.land_cover, hist=False, kde_kws=dict(linewidth=8))\n",
        "    ax2.set_xticks(np.arange(7))\n",
        "    ax2.set_xticklabels(LAND_COVER_TYPES, fontsize=20)\n",
        "    l1 = ax2.lines[0]\n",
        "    x1 = l1.get_xydata()[:,0]\n",
        "    y1 = l1.get_xydata()[:,1]\n",
        "    ax2.fill_between(x1,y1, color=\"#5471ab\", alpha=0.3)\n",
        "    ax2.set_xlabel(\"Land Cover Type\")\n",
        "    ax2.set_title(\"Land Cover Density\")\n",
        "\n",
        "show_band_matrix()\n",
        "show_land_cover()\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "f2db70108314089b6e4751ee038267274a220cfc846cc3db10a94220317f85ee"
    },
    "kernelspec": {
      "display_name": "Python 3.9.7 ('base')",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "orig_nbformat": 4,
    "colab": {
      "name": "eda.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}